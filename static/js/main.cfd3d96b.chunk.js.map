{"version":3,"sources":["Components/api/api.ts","Components/preparedList/preparedList.ts","Components/constants/constants.ts","Components/PostsList/PostsList.tsx","Components/SearchBar/SearchBar.tsx","Components/LoadButton/LoadButton.tsx","App.tsx","index.tsx"],"names":["loadData","url","a","fetch","then","response","json","responsed","newFunction","posts","users","comments","map","post","user","find","id","userId","filter","comment","postId","getPreparedList","PostsLists","props","postsList","key","className","style","maxWidth","username","title","body","length","SearchBar","useState","searchPhrace","setValue","type","placeholder","value","onChange","event","target","onSetValue","onFilterList","Button","onClick","onLoad","App","initialList","filteredList","postList","setPostsList","isLoading","setLoading","loadedList","isLoad","Boolean","wasFilteredList","includes","ReactDOM","render","document","getElementById"],"mappings":"sPAAaA,G,MAAQ,uCAAG,WAAUC,GAAV,eAAAC,EAAA,sEACEC,MAAMF,GAAKG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UADvC,cAChBC,EADgB,yBAGfA,GAHe,2CAAH,uDCSrB,SAASC,EAAYC,EAAeC,EAAeC,GACjD,OAAOF,EAAMG,KAAI,SAACC,GAAD,mBAAC,eACbA,GADY,IAEfC,KAAMJ,EAAMK,MAAK,SAACD,GAAD,OAAgBA,EAAKE,KAAOH,EAAKI,UAClDN,SAAUA,EAASO,QAAO,SAACC,GAAD,OAAsBA,EAAQC,SAAWP,EAAKG,WAIrE,IAAMK,EAAe,uCAAG,gCAAAnB,EAAA,sEACTF,EClBG,6EDiBM,cACvBS,EADuB,gBAETT,ECjBG,6EDeM,cAEvBU,EAFuB,gBAGNV,ECnBG,gFDgBG,cAGvBW,EAHuB,yBAKtBH,EAAYC,EAAOC,EAAOC,IALJ,4CAAH,qDEVfW,EAAwB,SAACC,GACpC,OACE,4BACGA,EAAMC,UAAUZ,KAAI,SAAAC,GAAI,OACvB,wBAAIY,IAAKZ,EAAKG,IACZ,yBACEU,UAAU,2BACVC,MAAO,CAAEC,SAAU,UAEnB,yBAAKF,UAAU,eAAeb,EAAKC,KAAKe,UACxC,yBAAKH,UAAU,aACb,wBAAIA,UAAU,cAAcb,EAAKiB,OACjC,uBAAGJ,UAAU,aAAab,EAAKkB,MAC/B,wBAAIL,UAAU,cAAd,mBAAwCb,EAAKF,SAASqB,iBCdvDC,EAAuB,SAACV,GAAW,IAAD,EACZW,mBAAiB,IADL,mBACtCC,EADsC,KACxBC,EADwB,KAS7C,OACE,yBAAKV,UAAU,cACb,2BACEW,KAAK,OACLX,UAAU,eACVY,YAAY,YACZC,MAAOJ,EACPK,SAAU,SAACC,IAbE,SAACA,GAAgD,IAC1DF,EAAUE,EAAMC,OAAhBH,MAERH,EAASG,GAWHI,CAAWF,GACXlB,EAAMqB,aAAaH,QCjBhBI,EAAoB,SAACtB,GAChC,OACE,4BACEG,UAAU,yBACVoB,QAASvB,EAAMwB,OACfV,KAAK,UAEJd,EAAMO,QCqDEkB,EA3DC,WAAO,IAAD,EACad,mBAAqB,CACpDe,YAAa,GACbC,aAAc,KAHI,mBACbC,EADa,KACHC,EADG,OAKYlB,mBAAiB,QAL7B,mBAKbmB,EALa,KAKFC,EALE,KAOdP,EAAM,uCAAG,4BAAA7C,EAAA,0DACTiD,EAASF,YAAYjB,OADZ,wDAKbsB,EAAW,cALE,SAMYjC,IANZ,OAMPkC,EANO,OAQbH,EAAa,CACXH,YAAaM,EACbL,aAAcK,IAEhBD,EAAW,QAZE,2CAAH,qDA2BNE,EAASC,QAAQN,EAASF,YAAYjB,QAE5C,OACE,oCACE,qDACEwB,EAOE,oCACE,kBAAC,EAAD,CACEZ,aA1BS,SAACH,GAAgD,IAC5DF,EAAUE,EAAMC,OAAhBH,MAEFmB,EAAkBP,EAASF,YAC9B/B,QAAO,SAAAL,GAAI,OAAIA,EAAKiB,MAAM6B,SAASpB,IAAU1B,EAAKkB,KAAK4B,SAASpB,MAEnEa,EAAa,2BACRD,GADO,IAEVD,aAAcQ,QAoBR,kBAAC,EAAD,CACElC,UAAW2B,EAASD,gBAX1B,kBAAC,EAAD,CACEpB,MAAOuB,EACPN,OAAQA,MC7ClBa,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.cfd3d96b.chunk.js","sourcesContent":["export const loadData = async <T>(url: string): Promise<T[]> => {\n  const responsed = await fetch(url).then(response => response.json());\n\n  return responsed;\n};\n","import { loadData } from '../api/api';\nimport {\n  Post,\n  User,\n  Comment,\n  PreparedPost,\n} from '../interfaces/interfaces';\nimport { URL_POSTS, URL_USERS, URL_COMMENTS } from '../constants/constants';\n\nfunction newFunction(posts: Post[], users: User[], comments: Comment[]): PreparedPost[] {\n  return posts.map((post: Post) => ({\n    ...post,\n    user: users.find((user: User) => user.id === post.userId) as User,\n    comments: comments.filter((comment: Comment) => comment.postId === post.id) as Comment[],\n  }));\n}\n\nexport const getPreparedList = async (): Promise<PreparedPost[]> => {\n  const posts = await loadData<Post>(URL_POSTS);\n  const users = await loadData<User>(URL_USERS);\n  const comments = await loadData<Comment>(URL_COMMENTS);\n\n  return newFunction(posts, users, comments);\n};\n","export const URL_POSTS = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/posts.json';\nexport const URL_COMMENTS = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/comments.json';\nexport const URL_USERS = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/users.json';\n","import React, { FC } from 'react';\nimport { PreparedPost } from '../interfaces/interfaces';\n\ninterface Props {\n  postsList: PreparedPost[];\n}\n\nexport const PostsLists: FC<Props> = (props) => {\n  return (\n    <ul>\n      {props.postsList.map(post => (\n        <li key={post.id}>\n          <div\n            className=\"card border-primary mb-3\"\n            style={{ maxWidth: '20rem' }}\n          >\n            <div className=\"card-header\">{post.user.username}</div>\n            <div className=\"card-body\">\n              <h4 className=\"card-title\">{post.title}</h4>\n              <p className=\"card-text\">{post.body}</p>\n              <h6 className=\"card-title\">{`Comments ${post.comments.length}`}</h6>\n            </div>\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { FC, useState } from 'react';\n\ninterface Props {\n  onFilterList: (event: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const SearchBar: FC<Props> = (props) => {\n  const [searchPhrace, setValue] = useState<string>('');\n\n  const onSetValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setValue(value);\n  };\n\n  return (\n    <div className=\"form-group\">\n      <input\n        type=\"text\"\n        className=\"form-control\"\n        placeholder=\"Find post\"\n        value={searchPhrace}\n        onChange={(event) => {\n          onSetValue(event);\n          props.onFilterList(event);\n        }}\n      />\n    </div>\n  );\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  onLoad: () => void;\n  title: string;\n}\n\nexport const Button: FC<Props> = (props) => {\n  return (\n    <button\n      className=\"btn btn-primary btn-lg\"\n      onClick={props.onLoad}\n      type=\"button\"\n    >\n      {props.title}\n    </button>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport './App.css';\nimport { getPreparedList } from './Components/preparedList/preparedList';\nimport { ListsState } from './Components/interfaces/interfaces';\nimport { PostsLists } from './Components/PostsList/PostsList';\nimport { SearchBar } from './Components/SearchBar/SearchBar';\nimport { Button } from './Components/LoadButton/LoadButton';\n\nconst App: FC = () => {\n  const [postList, setPostsList] = useState<ListsState>({\n    initialList: [],\n    filteredList: [],\n  });\n  const [isLoading, setLoading] = useState<string>('Load');\n\n  const onLoad = async () => {\n    if (postList.initialList.length) {\n      return;\n    }\n\n    setLoading('Loading...');\n    const loadedList = await getPreparedList();\n\n    setPostsList({\n      initialList: loadedList,\n      filteredList: loadedList,\n    });\n    setLoading('Load');\n  };\n\n  const onFilterList = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    const wasFilteredList = postList.initialList\n      .filter(post => post.title.includes(value) || post.body.includes(value));\n\n    setPostsList({\n      ...postList,\n      filteredList: wasFilteredList,\n    });\n  };\n\n  const isLoad = Boolean(postList.initialList.length);\n\n  return (\n    <>\n      <h1>Dynamic list of posts</h1>\n      {!isLoad ? (\n        <Button\n          title={isLoading}\n          onLoad={onLoad}\n        />\n      )\n        : (\n          <>\n            <SearchBar\n              onFilterList={onFilterList}\n            />\n            <PostsLists\n              postsList={postList.filteredList}\n            />\n          </>\n        )}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}